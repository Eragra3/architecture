// <auto-generated />
using System;
using KekManager.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KekManager.Database.Migrations
{
    [DbContext(typeof(FullDatabaseContext))]
    [Migration("20180701103939_AddedResearchFellow")]
    partial class AddedResearchFellow
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KekManager.Data.Models.LearningProgramModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CnpsHours");

                    b.Property<int>("Level");

                    b.Property<int>("Mode");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberOfSemesters");

                    b.Property<string>("Specialization");

                    b.HasKey("Id");

                    b.ToTable("LearningProgram");

                    b.HasData(
                        new { Id = 1, CnpsHours = 700, Level = 1, Mode = 2, Name = "Informatyka", NumberOfSemesters = 8, Specialization = "" },
                        new { Id = 2, CnpsHours = 700, Level = 1, Mode = 1, Name = "Informatyka", NumberOfSemesters = 7, Specialization = "" },
                        new { Id = 3, CnpsHours = 700, Level = 3, Mode = 2, Name = "Informatyka", NumberOfSemesters = 4, Specialization = "Projektowanie Systemów Informatycznych" },
                        new { Id = 4, CnpsHours = 1200, Level = 3, Mode = 1, Name = "Informatyka", NumberOfSemesters = 3, Specialization = "Danologia" }
                    );
                });

            modelBuilder.Entity("KekManager.Data.Models.ModuleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Area");

                    b.Property<int>("LearningProgramId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LearningProgramId");

                    b.ToTable("Module");

                    b.HasData(
                        new { Id = 1, Area = 5, LearningProgramId = 1, Name = "Aplikacje Webowe" },
                        new { Id = 2, Area = 2, LearningProgramId = 1, Name = "Przedmioty Humanistyczne" },
                        new { Id = 3, Area = 1, LearningProgramId = 1, Name = "Zajęcia Sportowe" },
                        new { Id = 4, Area = 5, LearningProgramId = 2, Name = "Aplikacje Webowe" },
                        new { Id = 5, Area = 2, LearningProgramId = 2, Name = "Przedmioty Humanistyczne" },
                        new { Id = 6, Area = 1, LearningProgramId = 2, Name = "Zajęcia Sportowe" },
                        new { Id = 7, Area = 5, LearningProgramId = 3, Name = "Aplikacje Webowe" },
                        new { Id = 8, Area = 2, LearningProgramId = 3, Name = "Przedmioty Humanistyczne" },
                        new { Id = 9, Area = 5, LearningProgramId = 4, Name = "Aplikacje Webowe" },
                        new { Id = 10, Area = 2, LearningProgramId = 4, Name = "Przedmioty Humanistyczne" }
                    );
                });

            modelBuilder.Entity("KekManager.Data.Models.ResearchFellowModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ResearchFellow");

                    b.HasData(
                        new { Id = 1, FirstName = "Daniel", LastName = "Bider", Title = "inż.", UserId = 3 },
                        new { Id = 2, FirstName = "Szymon", LastName = "Barańczyk", Title = "inż." },
                        new { Id = 3, FirstName = "John", LastName = "Doe", Title = "mgr inż." }
                    );
                });

            modelBuilder.Entity("KekManager.Security.Domain.SecurityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KekManager.Data.Models.ModuleModel", b =>
                {
                    b.HasOne("KekManager.Data.Models.LearningProgramModel", "LearningProgram")
                        .WithMany("Modules")
                        .HasForeignKey("LearningProgramId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KekManager.Security.Domain.SecurityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KekManager.Security.Domain.SecurityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KekManager.Security.Domain.SecurityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KekManager.Security.Domain.SecurityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
